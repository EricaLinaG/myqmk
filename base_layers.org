* Base Keymap Layers

These are all of the base layer definitions in this configuration.
There are over 50. I have grouped them as best I can into
files of related keymaps.  Keymap families of a sort.

I abandoned qwerty for dvorak more than  25 years ago
and that certainly saved me from my carpal tunnel symptoms.
I find keyboard layouts very interesting.
I like to learn and explore new layouts. So that is easy to do here.

** Files
These are the source files tangled from this literate code org document.
Its all copyrights here.
*** =base_layers.h=
This file contains the master include list of all the other base layer files.

#+begin_src C :tangle base_layers/base_layers.h
#pragma once
/*
  Copyright 2018-2023 EricaLina, Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src
*** =dvorak.h=
#+begin_src C :tangle base_layers/dvorak.h
#pragma once
/*
  Copyright 2018-2023 EricaLina, Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src

*** =qwerty.h=
#+begin_src C :tangle base_layers/qwerty.h
#pragma once
/*
  Copyright 2018-2023 EricaLina, Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src
*** =maks.h=
#+begin_src C :tangle base_layers/maks.h
#pragma once
/*
  Copyright 2018-2023 EricaLina, Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src
*** =alt.h=
#+begin_src C :tangle base_layers/alt.h
#pragma once
/*
  Copyright 2018-2023 EricaLina, Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src
*** =gap.h=
#+begin_src C :tangle base_layers/gap.h
#pragma once
/*
  Copyright 2018-2023 EricaLina, Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src
*** =hands_down.h=
#+begin_src C :tangle base_layers/hands_down.h
#pragma once
/*
  Copyright 2018-2023 EricaLina, Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src
*** =beakl.h=
#+begin_src C :tangle base_layers/beakl.h
#pragma once
/*
  Copyright 2018-2023 EricaLina, Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src
*** =bepo.h=
#+begin_src C :tangle base_layers/bepo.h
#pragma once
/*
  Copyright 2018-2023 EricaLina, Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src
*** =carpalx.h=
#+begin_src C :tangle base_layers/carpalx.h
#pragma once
/*
  Copyright 2018-2023 EricaLina, Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src
** A Base Layer Template

*** Some Parts
We need all the parts to build our maps. Any keycodes we have, the language
key code fixer and the way to let the Oled know what our keymap looks like.
These are included here so no one else needs to.

#+begin_src C :tangle base_layers/base_layers.h
#include "custom_keycodes.h"
#include "lang_map.h"
#include "oled_stuff.h"
#+end_src

*** The Template

There are two parts here, the map of the keymap for the oled and the map
of the keymap for the keymap. Both are easy.

If the keymap you want to create has a family it belongs to and that family has a file/section,
then put it there. If not, create a new file, put your map in it and add it to the list.

In the template the names should match. Just replace 'EMPTY' in the template below with your
keymap name.

Names and layout part names all have *___triple-understores___*
at each end so they are easily identifiable as larger, or complete layer chunks.
This naming is also a remnant of the original wrapper code we used. I got tired of
all the underscores and shortened them right away.  I do like it this way as they
are easily seen and identified if named well.

**** Le carte de map
First is the Carte de map, The map of the keymap that we give to the Oled.
It takes 3 strings and you can put whatever you want in there. It may or may not
display properly as is the case with accent letters.   And dont let it get too long and
not fit. That doesn't work very well.

#+begin_src C :tangle base_layers/base_layers.h
// An empty keymap layer template.

#ifdef _EMPTY_LAYER_ENABLE

// Layer name,
// text name,
// url,
// note,
// text map,
// definition,
LAYER_NAME(EMPTY, "Empty",           \
                 https://empty,     \
                 "this is a note")

carte_de_MAP("  ",               \
             "  ",               \
             "  ")
#+end_src

**** Key Map
This is the actual keymap. Everything here is
indicated by an underscore and its letter. _A will indicate *KC__A* for en and *BP_A* for
Bépo, _US_A for US Intl._  There are maps which have alternate key pairs indicated. these should use the prefix
for themselves, creating the keycodes for them as needed.
So __COMM becomes __HD_COMM_ for many hands down keymaps.

This happens when implementing a keyboard of a foreign language, the pairings of
letters you want may not exist automatically. But also for Maps like beakl and hands down which have changed punctuation keys as a basic part of the maps.

This is the 5 column, 3x5 x 2 or 3x10, however you want to think of it, keymap.
Keyboard layouts will add in outer columns, upper rows, lower rows and thumbs as needed.
Most of the time number row sets are all whatever the default says. Some exceptions are beakl, bepo and optimot which use a differently configured number row.

#+begin_src C :tangle base_layers/base_layers.h
LAYER_MAP(
   LANG_MAP(_, _, _, _, _,   _, _, _, _, _,      \
            _, _, _, _, _,   _, _, _, _, _,      \
            _, _, _, _, _,   _, _, _, _, _))


#endif
#+end_src

** The Keymaps.
*** The list of families

Pull in all the definitions. this is an h file we can use to get all base maps.

#+begin_src C :tangle base_layers/base_layers.h
// dvorak, capewell-dvorak, ahei, and boo.
#include "dvorak.h"
//qwerty, workman, norman,
#include "qwerty.h"
// Colemak, halmak, minimak, etc.
#include "maks.h"
// eucalyn, maltron
#include "alt.h"
// mtgap, ctgap, apt
#include "gap.h"
// some hands down.
#include "hands_down.h"
// some beakls.
#include "beakl.h"
// bepo, optimot, beakl19bis, godox-fr?.
#include "bepo.h"
// some carpalxs.
#include "carpalx.h"

#+end_src

This is the end of =base_layers.h=

#+begin_src C :tangle base_layers/base_layers.h
// Provides all the base layers we have.
// base_layers.h ends here.
#+end_src

*** Combo ref - sort of random here. Used or not ?
#+begin_src C :tangle base_layers/alt.h
// Layer for combo reference. Make more than one by changing lang is.
#define ___COMBO_REF___                                                 \
LAYER_MAP(
  LANG_MAP(_1L1,  _1L2, _1L3, _1L4,  _1L5,   _1R1, _1R2, _1R3, _1R4, _1R5, \
           _2L1,  _2L2, _2L3, _2L4,  _2L5,   _2R1, _2R2, _2R3, _2R4, _2R5, \
           _3L1,  _3L2, _3L3, _3L4,  _3L5,   _3R1, _3R2, _3R3, _3R4, _3R5)

#+end_src
*** Alternate misfits
**** Maltron
#+begin_src C :tangle base_layers/alt.h
#ifdef _MALTRON_LAYER_ENABLE

LAYER_NAME(MALTRON, "Maltron",                   \
                   "",                          \
                   "e goes on left thumb")

carte_de_map("   qpycb  vmuzl",               \
             "   anisf  ctdor",               \
             "   ;/jg,  .wk-x e")

LAYER_MAP(
  LANG_MAP(_Q,     _P,    _Y, _C, _B,       _V,   _M, _U, _Z,    _L, \
           _A,     _N,    _I, _S, _F,       _D,   _T, _D, _O,    _R, \
           _SCLN,  _SLSH, _J, _G, _COMM,    _DOT, _W, _K, _MINS, _X))

#endif
#+end_src
**** EUCALYN
#+begin_src C :tangle base_layers/alt.h

#ifdef _EUCALYN_LAYER_ENABLE

LAYER_NAME(EUCALYN, "Eucalyn",
                   "", \
                   "")

carte_de_MAP("   /,.fq  aoeiu",               \
             "   zxcvw  mrdyp",               \
             "   gtksn  bhjl;")

LAYER_MAP(
  LANG_MAP(_SLSH, _COMM, _DOT, _F, _Q,   _A, _O, _E, _I, _U,      \
           _Z,    _X,    _C,   _V, _W,   _M, _R, _D, _Y, _P,      \
           _G,    _T,    _K,   _S, _N,   _B, _H, _J, _L, _SCLN))


#endif

#+end_src
**** RSTHD
#+begin_src C :tangle base_layers/alt.h
#ifdef _RSTHD_LAYER_ENABLE


// RSTHD
/* j c y f k | z l , u q = */
/* r s t h d | m n a i o - */
/* / v g p b | x w . ; ' */
/* e */

// need a thumb cluster for this.
// removed = and -, edge keys if you've got them.
// e goes on left thumb

LAYER_NAME(RSTHD, "Rsthd",
                   "", \
                   "E on left thumb")

carte_de_MAP("   jcyfk  zl,uq",             \
             "   rsthd  mnaio",             \
             "   /vgpb  xw.;' e")

LAYER_MAP(
  LANG_MAP(_J, _C, _Y, _F, _K,   _Z, _L, _COMM, _U,    _Q,          \
           _R, _S, _T, _H, _D,   _M, _N, _A,    _I,    _O,          \
           _/, _V, _G, _P, _B,   _X, _W, _DOT,  _SCLN, _QUOT))


#endif

#+end_src
**** Hands Up
#+begin_src C :tangle base_layers/alt.h
#ifdef _HANDS_UP_LAYER_ENABLE

LAYER_NAME(HANDS_UP, "Hands_up", \
                   "", \
                   "")

carte_de_MAP("  fyou,  kwclp",          \
             "  hiea.  dtsrn",          \
             "  bj'z;  vmgxq")

LAYER_MAP(
  LANG_MAP(_F, _Y, _O,    _U, _COMM,   _K, _W, _C, _L, _P, \
           _H, _I, _E,    _A, _DOT ,   _D, _T, _S, _R, _N, \
           _B, _J, _QUOT, _Z, _SCLN,   _V, _M, _G, _X, _Q))


#endif
#+end_src

**** White
#+begin_src C :tangle base_layers/alt.h
#ifdef _WHITE_LAYER_ENABLE

LAYER_NAME(WHITE, "White", \
                   "", \
                   "")

carte_de_MAP("  vyd,'  jmlu-",                \
             "  atheb  csnoi",                \
             "  pkgwq  xrf.z")

LAYER_MAP(
  LANG_MAP(_V, _Y, _D, _COMM, _QUOT,   _J, _M, _L, _U,   _MINS,   \
           _A, _T, _H, _E,    _B,      _C, _S, _N, _O,   _I,      \
           _P, _K, _G, _W,    _Q,      _X, _R, _F, _DOT, _Z))


#endif
#+end_src
**** ISRT
#+begin_src C :tangle base_layers/alt.h
#ifdef _ISRT_LAYER_ENABLE

LAYER_NAME(ISRT, "Isrt", \
                 "", \
                 "")

carte_de_MAP("  yclmk  zfu,'",                \
             "  isrtg  pneao",                \
             "  qvwdj  bh/.x")

LAYER_MAP(
  LANG_MAP(_Y, _C, _L, _M, _K,   _Z, _F, _U,      _COMM, _QUOT,     \
           _I, _S, _R, _T, _G,   _P, _N, _E,      _A,    _O,          \
           _Q, _V, _W, _D, _J,   _B, _H, _SLSH,   _DOT,  _X))

#endif
#+end_src
**** Soul
#+begin_src C :tangle base_layers/alt.h
#ifdef _SOUL_LAYER_ENABLE

LAYER_NAME(SOUL, "Soul", \
                 "", \
                 "")

carte_de_MAP("  qwldp  kmuy;",                \
             "  srtg   fneio",                \
             "  zxcvj  bh,./")

LAYER_MAP(
  LANG_MAP(_Q, _W, _L, _D, _P,   _K, _M, _U,      _Y,     _SCLN,      \
           _A, _S, _R, _T, _G,   _F, _N, _E,      _I,     _O,           \
           _Z, _X, _C, _V, _J,   _B, _H, _COMM, _DOT, _SLSH))

#endif
#+end_src
**** Niro
#+begin_src C :tangle base_layers/alt.h
#ifdef _NIRO_LAYER_ENABLE

LAYER_NAME(NIRO, "Niro", \
                 "", \
                 "")

carte_de_MAP("  qwudp  jfyl;",                \
             "  asetg  hniro",                \
             "  zxcvb  km,./")

LAYER_MAP(
  LANG_MAP(_Q, _W, _U, _D, _P,   _J, _F, _Y,      _L,     _SCLN,      \
           _A, _S, _E, _T, _G,   _H, _N, _I,      _R,     _O,           \
           _Z, _X, _C, _V, _B,   _K, _M, _COMM,   _DOT,   _SLSH))

#endif
#+end_src
**** Asset
#+begin_src C :tangle base_layers/alt.h
#ifdef _ASSET_LAYER_ENABLE

LAYER_NAME(ASSET, "Asset", \
                  "", \
                  "")

carte_de_MAP("  qwjfg   ypul;",               \
             "  asetd   hnior",               \
             "  zxcvb   km,./")

LAYER_MAP(
  LANG_MAP(_Q, _W, _J, _F, _G,    _Y, _P, _U,      _L,     _SCLN,     \
           _A, _S, _E, _T, _D,    _H, _N, _I,      _O,     _R,          \
           _Z, _X, _C, _V, _B,    _K, _M, _COMM,   _DOT,   _SLSH))

#endif
#+end_src
**** Whorf
#+begin_src C :tangle base_layers/alt.h
#ifdef _WHORF_LAYER_ENABLE

LAYER_NAME(WHORF, "WHorf", \
                  "", \
                  "")

carte_de_MAP("flhdm  vwou,",                  \
             "srntk  gyaei",                  \
             "xjbzq  pc';. ")

LAYER_MAP(
  LANG_MAP(_F, _L, _H, _D, _M,   _V, _W, _O,      _U,      _COMM,    \
           _S, _R, _N, _T, _K,   _G, _Y, _A,      _E,      _I,         \
           _X, _J, _B, _Z, _Q,   _P, _C, _QUOT,   _SCLN,   _DOT ))

#endif
#+end_src
**** Whorf 6
#+begin_src C :tangle base_layers/alt.h
#ifdef _WHORF6_LAYER_ENABLE

LAYER_NAME(WHORF6, "Whorf 6", \
                   "", \
                   "")

carte_de_MAP("vlhkj  gwou.",                  \
             "srntk  ydeai",                  \
             "xqbfz  pc',; ")

LAYER_MAP(
  LANG_MAP(_V, _L, _H, _D, _M,   _G, _W, _O,      _U,    _DOT,      \
           _S, _R, _N, _T, _K,   _Y, _D, _E,      _A,    _I,          \
           _X, _Q, _B, _F, _Z,   _P, _C, _QUOT,   _COMM, _SCLN ))

#endif
#+end_src
**** +rsht/iena+
#+begin_src C :tangle base_layers/alt.h

/* rsht/iena */
/* jfldv @uopq */
/* zrshtg   .iena: */
/* xcmwk  /y,b?       */
#+end_src

**** Pine
#+begin_src C :tangle base_layers/alt.h
#ifdef _PINE_LAYER_ENABLE

LAYER_NAME(PINE, "Pine", \
                 "", \
                 "")

carte_de_MAP("ylrdw  jmou,  ",        \
             "csntg  phaei  ",        \
             "xzqvk  bf'/.  ")

LAYER_MAP(
  LANG_MAP( _Y, _L, _R, _D, _W, _J, _M, _O,    _U,    _COMM,                \
            _C, _S, _N, _T, _G, _P, _H, _A,    _E,    _I,                     \
            _X, _Z, _Q, _V, _K, _B, _F, _QUOT, _SLSH, _DOT  ))

#endif
#+end_src

**** Graphite

This one still needs to have the proper shifted symbol pairs created for it.
See more on github here: [[https://github.com/rdavison/graphite-layout][Graphite]]

#+begin_src C :tangle base_layers/alt.h
#ifdef _GRAPHITE_LAYER_ENABLE

/* Graphite
 https://github.com/rdavison/graphite-layout
 ~ ! @ # $ %  ^ & * ( ) { }
   B L D W Z  _ F O U J : + |
   N R T S G  Y H A E I ?
   Q X M C V  K P > " <

 ` 1 2 3 4 5  6 7 8 9 0 [ ]
   b l d w z  ' f o u j ; = \
   n r t s g  y h a e i ,
   q x m c v  k p . - /
,*/
LAYER_NAME(GRAPHITE, "Graphite", \
          "https://github.com/rdavison/graphite-layout", \
          "")

carte_de_MAP("bldwz  'fouj",         \
             "nrtsg  yhaei" ,        \
             "qqmcv  kp.-/")

LAYER_MAP(
  LANG_MAP(_B, _L, _D, _W, _Z,   _UND, _F, _O,   _U,    _J,     \
           _N, _R, _T, _S, _G,   _Y,   _H, _A,   _E,    _I,     \
           _Q, _X, _M, _C, _V,   _K,   _P, _DOT, _DASH, _SLSH ))

#endif
#+end_src

*** Beakl
**** Introduction
 beakl, balanced effort key layout.
 Beakl 15 and 19 are somewhat more related.
 Beakl-27 is the latest from 2020, The website for Beakl is now gone.
 Beakl-wi is a Beakl derivative from the darndest thing.


 Remember the - and ; outside pinky keys.
 Or use the 6 size.
 Both are on the symbol layer too. So you
 wont lose them at least.
 Make sure these keycodes do something, if you are using KC...

 =KC_BK_COMM=, =KC_BK_QUOT=, =KC_BK_DOT= - =Beakl->Qwerty=

 =BP_BK_COMM=, =BP_BK_QUOT=, =BP_BK_DOT= - =Beakl->Bepo=
 take care of the different shifted chars.

**** Beakl 27

Altered shifted pairs: dot = .`  comma = ,?   dquot = !"
Alt target is BK2

***** Base layer
=32104 76598=
=qhoux gcmrv=
=yiea. dstnb=
=j",k' wflpz=

***** Shift layer
  =!@$#% ^(*)&=
  =QHOUX GCMRV=
  =YIEA` DSTNB=
  =J!?K' WFLPZ=

***** 27

#+begin_src C :tangle base_layers/beakl.h
#ifdef _BEAKL27_LAYER_ENABLE

LAYER_NAME(BEAKL27, "Beakl 27", \
                   "", \
                   "")

carte_de_MAP(" qhoux gcmrz ",                 \
             " yiea. dstnb ",                 \
             " j\",k' wflpv ")

// Alt target is BK
// altered shifted pairs: quot = '`  comma = ,!   dot = .@
LAYER_MAP(
  LANG_MAP(_Q, _H,        _O,        _U, _X,        _G, _C, _M, _R, _Z,       \
           _Y, _I,        _E,        _A, _BK2_DOT,  _D, _S, _T, _N, _B,       \
           _J, _BK2_DQUO, _BK2_COMM, _K, _BK2_QUOT, _W, _F, _L, _P, _V))
#endif
#+end_src

***** 27a
#+begin_src C :tangle base_layers/beakl.h
#ifdef _BEAKL27A_LAYER_ENABLE

LAYER_NAME(BEAKL27A, "Beakl 27A", \
                   "", \
                   "")

carte_de_MAP(" j\",k' gcmrz ",                 \
             " yiea. dstnb ",                  \
             " qhoux wflpv ")

// Alt target is BK
// altered shifted pairs: quot = '`  comma = ,!   dot = .@
LAYER_MAP(
  LANG_MAP(_J, _BK2_DQUO, _BK2_COMM, _K, _BK2_QUOT, _G, _C, _M, _R, _Z,       \
           _Y, _I,        _E,        _A, _BK2_DOT,  _D, _S, _T, _N, _B,       \
           _Q, _H,        _O,        _U, _X,        _W, _F, _L, _P, _V))

#endif
#+end_src
**** 15
#+begin_src C :tangle base_layers/beakl.h
#ifdef _BEAKL15_LAYER_ENABLE

LAYER_NAME(BEAKL15, "Beakl 15", \
                   "", \
                   "")

/* BEAKL 15 (main layer): */
/*   40123 76598   */
carte_de_MAP(" qhoux gcrfz ",                 \
             " yiea. dstnb ",                 \
             " j/,k' wmlpv ")

// Alt target is BK
LAYER_MAP(
  LANG_MAP(_Q, _H,    _O,       _U, _X,       _G, _C, _R, _F, _Z, \
           _Y, _I,    _E,       _A, _BK_DOT,  _D, _S, _T, _N, _B, \
           _J, _SLSH, _BK_COMM, _K, _BK_QUOT, _W, _M, _L, _P, _V))
#endif
#+end_src
**** 19
#+begin_src C :tangle base_layers/beakl.h
#ifdef _BEAKL19_LAYER_ENABLE

/* BEAKL 19    */
// Beakl 19.  scores better than 15, better in french also.
// Both are lots better than dvorak or bepo.

/* same symbols and keypad as 15 */
/* number row is different */
/*  32104 76598  */

// Alt target is BK
LAYER_NAME(BEAKL19, "Beakl 19", \
                   "", \
                   "")

carte_de_MAP(" q.ouj wdnm, ",                 \
             " haeik gsrtp ",                 \
             " z'/yx bclfv ")

LAYER_MAP(
  LANG_MAP(_Q, _DOT,  _O,    _U, _J, _W,    _D, _N, _M, _BK_COMM,        \
           _H, _A,    _E,    _I, _K, _G,    _S, _R, _T, _P,             \
           _Z, _QUOT, _SLSH, _Y, _X, _B,    _C, _L, _F, _V))

#endif
#+end_src
**** 19bis - French

I found this modified Beakl 19 in KLA data, it was a quick modification that added,
as easily as possible, the most common french accent letters to
the existing Beakl 19 keymap. Its scores were surprisingly good,
so I worked on it a little and came up with this one which is even better.

It scores better than Bépo and Dvorak, and Colemak in both English and french.
*YMMV!!*

These are  full 3x12 matrix layouts.

***** Least common french and english letters. *BEAKL 19bis* - Beakl/Bépo hybrid. English with French optimisations.

 Least used letters in french xzykw QJÀ are fairly high in use.

 XZ are good choices for pushing out, from english and french,
 or using chords in both languages. Bad choices for Vi.

 Note: The percentages came from different sources so do not
 match between languages.

Least used letters in French

 |---+--------|
 | Q | 0.89 % |
 | J | 0.71 % |
 | À | 0.54 % |
 | X | 0.42 % |
 | È | 0.35 % |
 | Ê | 0.24 % |
 | Z | 0.21 % |
 | Y | 0.19 % |
 | K | 0.16 % |
 | Ô | 0.07 % |
 | Û | 0.05 % |
 | W | 0.04 % |

 Least used letters in english
 |---+---------+------|
 | X | 0.2902% | 1.48 |
 | Z | 0.2722% | 1.39 |
 | J | 0.1965% | 1.00 |
 | Q | 0.1962% |  (1) |


***** BEAKL 19bis - original.

The é and è were simply added for analysis by the KLA, not real use.
 even so, this layout scores well for french, better than bepo and mtgap.

  =qyouz  wdnck=
 =-hiea,  gtrsp;=
 =èj'é.x  vmlfb=

***** BEAKL 19bis mod z.
 French optimised with some english.
 This version rearranges things a little based on fequency.
 Dead keys and the most common accent keys are available.
 the original was just some extra keys thrown in the empty corners
 to satisfy the KLA where I originally found it.

 Since it needs 3x12, I filled in the corners and removed ;.
 Leaving y where it is. the o and the e might cause sfbs.
 Put é on a different finger from e.
 Swap z, e's, add à, ^, and ê, swap ; for -.
 It might be beneficial to swap w and à, as à is much more frequent than w

#+begin_src C :tangle base_layers/beakl.h
#ifdef _BEAKL19BIS_LAYER_ENABLE

LAYER_NAME(BEAKL19bis, "Beakl 19 bis", \
                   "", \
                   "French optimised 3x12")

carte_de_MAP(" àqyoué  wdnck^ ",              \
             " ;hiea,  gtrsp- ",              \
             " zj'è.x  vmlfbê  ")

LAYER_MAP(
  LANG_MAP6(                                                            \
            _AGRV, _Q, _Y,    _O,    _U,   _EACU,   _W, _D, _N, _C, _K, _DCIR, \
            _SCLN, _H, _I,    _E,    _A,   _COMM,   _G, _T, _R, _S, _P, _MINS, \
            _Z,    _J, _QUOT, _EGRV, _DOT, _X,      _V, _M, _L, _F, _B, _ECIR))

#endif
#+end_src
**** WI
#+begin_src C :tangle base_layers/beakl.h
#ifdef _BEAKLWI_LAYER_ENABLE

// Beakl Wi.   This is the most current beakl this size. 18/01/2022.
// Nothing on the 6th outer columns but layer toggle buttons. All 6.
// altered shifted pairs: dot = .` comma = ,~  colon = :;
// i is on the left thumb.
/* ;you- ctrsv */
/* qheaw gdnmz */
/* j,.k' bplfx */
/*    i        */

LAYER_NAME(BEAKLWI, "Beakl WI", \
                    "",          \
                    "i on left thumb")

carte_de_MAP(" ;you- ctrsv ",                 \
             " qheaw gdnmz ",                 \
             " j,.k' bplfx i")

LAYER_MAP(
  LANG_MAP(_BKW_COLN, _Y,        _O,       _U, _MINS,   _C, _T, _R, _S, _V,   \
           _Q,        _H,        _E,       _A, _W,      _G, _D, _N, _M, _Z,   \
           _J,        _BKW_COMM, _BKW_DOT, _K, _QUOT,   _B, _P, _L, _F, _X))


// Thumbs.
#define ___BEAKLWI_CRKBD_THUMBS___ LT_ESC, LT_I, LT_TAB,  LT_ENT, LT_SPC, LT_BSPC

#endif
#+end_src
**** WIa
#+begin_src C :tangle base_layers/beakl.h
#ifdef _BEAKLWIa_LAYER_ENABLE

// My version, loses KC_mins, because it's easier on my symbol layer.
// put I in it's dvorak spot instead of thumbs, move W up to make room for I.
// I'd rather have w and i on different fingers. One domino...

// beakl-wi - mod iw-

LAYER_NAME(BEAKLWIa, "Beakl WIa", \
                   "", \
                   "No alpha on thumb.")

carte_de_MAP(" ;youw ctrsv ",                 \
             " qheai gdnmz ",                 \
             " j,.k' bplfx ")

// Alt target is BKW
LAYER_MAP(
  LANG_MAP(_BKW_SCLN, _Y,        _O,       _U, _W,      _C, _T, _R, _S, _V,   \
           _Q,        _H,        _E,       _A, _I,      _G, _D, _N, _M, _Z,   \
           _J,        _BKW_COMM, _BKW_DOT, _K, _QUOT,   _B, _P, _L, _F, _X))
#+end_src
**** WIb
#+begin_src C :tangle base_layers/beakl.h
#ifdef _BEAKLWIb_LAYER_ENABLE

LAYER_NAME(BEAKLWIb, "Beakl WIb", \
                   "", \
                   "No alpha on thumb.")

carte_de_MAP(" j,.k' ctrsv ",                 \
             " qheai gdnmz ",                 \
             " ;youw bplfx ")

// Alt target is BKW
LAYER_MAP(
  LANG_MAP(_J,        _BKW_COMM, _BKW_DOT, _K, _QUOT, _C, _T, _R, _S, _V,     \
           _Q,        _H,        _E,       _A, _I,    _G, _D, _N, _M, _Z,   \
           _BKW_SCLN, _Y,        _O,       _U, _W,    _B, _P, _L, _F, _X))
#endif
#+end_src
*** Bépo
 Maps based on BEPO.  These tend to want to be  3x12, squeezing
 them into a 3x10 can be a challenge. The compact versions attempt
 that with some success.

 It is generally accepted that Optimot is the better layout in this group.
 There are many variations.  Béop, Béopy, Godox-fr, etc. They are most
 easily found on the [[https:/bepo.fr][Bepo website]].
**** Optimot
#+begin_src C :tangle base_layers/bepo.h
#ifdef _OPTIMOT_LAYER_ENABLE

// OPtimot by @Pyjam.
/*  àjoéb fdl’qxz */
/*  aieu, ptsrn^ç */
/*  êkyè.w gcmhvx */
// -- rearranged z, and ç to get 3x12

LAYER_NAME(OPTIMOT, "Optimot", ,\
                    "", \
                    "French 3x12 by @Pyjam.")

carte_de_MAP(" çàjoéb fdl’qx ",               \
             "  aieu, ptsrn^ ",               \
             " êkyè.w gcmhvz ")

LAYER_MAP(
  LANG_MAP6(                                                            \
            _CCED, _AGRV, _J, _O,    _EACU, _B,   _F, _D, _L, _QUOT, _Q,  _X, \
            _TAB,  _A,    _I, _E,    _U,  _COMM,  _P, _T, _S, _R,    _N,  _DCIR, \
            _ECIR, _K,    _Y, _EGRV, _DOT, _W,    _G, _C, _M, _H,    _V,  _Z))
  ___12_SYMBOLS_BEPO___)
#endif
#+end_src
**** Optimot Compact
#+begin_src C :tangle base_layers/bepo.h
#ifdef _OPTIMOT_COMPACT_LAYER_ENABLE

LAYER_NAME(OPTIMOT_COMPACT, \
                   "Optimot compact", \
                   "", \
                   "French 3x10. Better than bepo")

// no z or x. combos exist for them.
carte_de_MAP(" àjoéb fdl’q ",                \
             " aieu, ptsrn ",                \
             " kyè.w gcmhv ")

LAYER_MAP(
  LANG_MAP6(                                                           \
            _AGRV, _J, _O,    _EACU, _B,     _F, _D, _L, _QUOT, _Q,    \
            _A,    _I, _E,    _U,    _COMM,  _P, _T, _S, _R,    _N,    \
            _K,    _Y, _EGRV, _DOT,  _W,     _G, _C, _M, _H,    _V,))
  ___10_SYMBOLS_BEPO___)

#endif
#+end_src
**** Bépo Compact

Fitting Bépo into a 3x10.

This one Depends on a mod tap on C for Ç , so we don't need CCED, on the base map.
It drops À and Ê for a little more room in the corner.

#+begin_src C :tangle base_layers/bepo.h
#ifdef _BEPO_COMPACT_LAYER_ENABLE

// Maybe Use this for C
//BP_C_CCED = MT(BP_CCED, BP_C)

// BEPO

// No quot, à or ç
/* bépoè vdljz */
/* auie, ctsrn */
/* myx.k qghfw */

LAYER_NAME(BEPO_COMPACT, \
                   "Bepo compact", \
                   "", \
                   "French Bepo 3x10, No quot, à or ç."))

carte_de_MAP("   bépoè  vdljz",               \
             "   auie,  ctsrn",               \
             "   myx.k  qghfw", \

LAYER_MAP(
  LANG_MAP(                                                     \
           _B, _EACU, _P, _O,   _EGRV,    _V, _D, _L, _J, _Z,   \
           _A, _U,    _I, _E,   _COMM,    _C, _T, _S, _R, _N,   \
           _M, _Y,    _X, _DOT, _K,       _Q, _G, _H, _F, _W))
  ___10_SYMBOLS_BEPO___)


#endif
#+end_src
**** Bépo
#+begin_src C :tangle base_layers/bepo.h
#ifdef _BEPO_LAYER_ENABLE

LAYER_NAME(BEPO, "BEPO", \
                 "", \
                 "French Bepo 3x12.")

carte_de_MAP(" çbépoè ^vdljz ",               \
             "  auie, ctsrnm ",               \
             " êàyx.k ’qghfw ")

LAYER_MAP(
  LANG_MAP6(_CCED, _B,    _EACU, _P, _O,   _EGRV,    _DCIR, _V, _D, _L, _J, _Z, \
            _TAB,  _A,    _U,    _I, _E,   _COMM,    _C,    _T, _S, _R, _N, _M, \
            _ECIR, _AGRV, _Y,    _X, _DOT, _K,       _QUOT, _Q, _G, _H, _F, _W))

  ___12_SYMBOLS_BEPO___)
#endif
#+end_src
**** +Godox-Fr+
#+begin_src C
#ifdef _GODOX_LAYER_ENABLE

// LAYER_NAME(GODOX, "Godox", \
                   // "", \
                   // "French 3x12.")
// dont like this one much.
/* #define ___GODOX_3x12___                                                \ */
LAYER_MAP(
/*   LANG_MAP6(___, _AGRV, _B, _EACU, _dot, _mins,    _DCIR, _V, _L,  _M, _X, _CCED, \ */
/*             ___,  _O,   _U, _I,    _A,   _J,       _G,    _T, _S,  _N, _R, _F, \ */
/*             ___, _Q,    _Y, _EGRV, _P,   _K,       _W,    _D, _UP, _H, _C, _Z) */
/* // E goes on left thumb. */
#endif
#+end_src
*** Carpalx
**** QFMLWY
#+begin_src C :tangle base_layers/carpalx.h
#ifdef _CARPALX_QFMLWY_LAYER_ENABLE

LAYER_NAME(CARPALX_QFMLWY, \
                   "Carpalx QFMLWY", \
                   "", \
                   "Carpalx")

carte_de_MAP("   qfmlw  yuobj",               \
             "   dstnr  iaeh;",               \
             "   zvgcx  pk,./")

LAYER_MAP(
  LANG_MAP(_Q, _F, _M, _L, _W,   _Y, _U, _O,    _B,   _J,           \
           _D, _S, _T, _N, _R,   _I, _A, _E,    _H,   _SCLN,      \
           _Z, _V, _G, _C, _X,   _P, _K, _COMM, _DOT, _SLSH))

#endif
#+end_src
**** QFMLWB
#+begin_src C :tangle base_layers/carpalx.h
#ifdef _CARPALX_QFMLWB_LAYER_ENABLE

LAYER_NAME(CARPALX_QFMLWB,  \
                   "Carpalx QFMLWB",  \
                   "", \
                   "Carpalx")

carte_de_MAP("   qgmlw  byuv;",               \
             "   dstnr  iaeoh",               \
             "   zxcfj  kp,./")

LAYER_MAP(
  LANG_MAP(_Q, _G, _M, _L, _W,   _B, _Y, _U,    _V,   _SCLN,      \
           _D, _S, _T, _N, _R,   _I, _A, _E,    _O,   _H,           \
           _Z, _X, _C, _F, _J,   _K, _P, _COMM, _DOT, _SLSH))

#endif
#+end_src
**** QGMLWY
#+begin_src C :tangle base_layers/carpalx.h
#ifdef _CARPALX_QGMLWY_LAYER_ENABLE

LAYER_NAME(CARPALX_QGMLWY, \
                   "Carpalx QGMLWY", \
                   "", \
                   "Carpalx")

carte_de_MAP("   qgmlw  yfub;",               \
             "   dstnr  iaeoh",               \
             "   zxcvj  kp,./")

LAYER_MAP(
  LANG_MAP(_Q, _G, _M, _L, _W,   _Y, _F, _U,    _B,   _SCLN,      \
           _D, _S, _T, _N, _R,   _I, _A, _E,    _O,   _H,           \
           _Z, _X, _C, _V, _J,   _K, _P, _COMM, _DOT, _SLSH))

#endif
#+end_src
*** Colemak
**** Colemak
#+begin_src C :tangle base_layers/maks.h
#ifdef _COLEMAK_LAYER_ENABLE

LAYER_NAME(COLEMAK, "Colemak", \
                   "", \
                   "")

carte_de_MAP("   qwfpg  jluy;",               \
             "   arstd  hneio",               \
             "   zxcvb  km,./")

LAYER_MAP(
  LANG_MAP(_Q, _W, _F, _P, _G,    _J, _L,  _U,    _Y,   _SCLN,    \
           _A, _R, _S, _T, _D,    _H, _N,  _E,    _I,   _O,         \
           _Z, _X, _C, _V, _B,    _K, _M,  _COMM, _DOT, _SLSH))

#endif
#+end_src
**** Colemak DH
#+begin_src C :tangle base_layers/maks.h
#ifdef _COLEMAK_DH_LAYER_ENABLE

LAYER_NAME(COLEMAK_DH, "Colemak DH", \
                   "", \
                   "")

carte_de_MAP("   qwfpb  jluy;",               \
             "   arstg  mneio",               \
             "   zxcdv  kh,./")

LAYER_MAP(
  LANG_MAP(_Q, _W, _F, _P, _B,    _J, _L, _U,    _Y,   _SCLN,     \
           _A, _R, _S, _T, _G,    _M, _N, _E,    _I,   _O,          \
           _Z, _X, _C, _D, _V,    _K, _H, _COMM, _DOT, _SLSH))

#endif
#+end_src
**** Halmak
#+begin_src C :tangle base_layers/maks.h
#ifdef _HALMAK_LAYER_ENABLE

LAYER_NAME(HALMAK, "Halmak", \
                   "", \
                   "")

carte_de_MAP("  wlrbz  ;qudj",                \
             "  shnt,  .aeoi",                \
             "  fmvc/  gpxky")

LAYER_MAP(
  LANG_MAP(_W, _L, _R, _B, _Z,      _SCLN, _Q, _U, _D, _J,  \
           _S, _H, _N, _T, _COMM,   _DOT,  _A, _E, _O, _I,  \
           _F, _M, _V, _C, _SLSH,   _G,    _P, _X, _K, _Y))

#endif
#+end_src
**** Minimak
#+begin_src C :tangle base_layers/maks.h
#ifdef MINIMAK_LAYER_ENABLE

LAYER_NAME(MINIMAK, "Minimak", \
                   "", \
                   "")

carte_de_MAP("  qwdrk  yuiop",                \
             "  astfg  hjel;",                \
             "  zxcvb  nm,./")

LAYER_MAP(
  LANG_MAP(_Q, _W, _D, _R, _K,   _Y, _U, _I,    _O,   _P,           \
           _A, _S, _T, _F, _G,   _H, _J, _E,    _L,   _SCLN,      \
           _Z, _X, _C, _V, _B,   _N, _M, _COMM, _DOT, _SLSH)
\

#endif
#+end_src
**** Minimak 8
#+begin_src C :tangle base_layers/maks.h
#ifdef MINIMAK_8_LAYER_ENABLE

LAYER_NAME(MINIMAK_8, "Minimak 8", \
                   "", \
                   "")

carte_de_MAP("  qwdrk  yuilp",                \
             "  astfg  hneo;",                \
             "  zxcvb  jm,./")

LAYER_MAP(
  LANG_MAP(_Q, _W, _D, _R, _K,   _Y, _U, _I,    _L,   _P,           \
           _A, _S, _T, _F, _G,   _H, _N, _E,    _O,   _SCLN,      \
           _Z, _X, _C, _V, _B,   _J, _M, _COMM, _DOT, _SLSH))


#endif
#+end_src
**** Minimak 12
#+begin_src C :tangle base_layers/maks.h
#ifdef MINIMAK_12_LAYER_ENABLE

LAYER_NAME(MINIMAK_12, \
                   "Minimak 12", \
                   "", \
                   "")

carte_de_MAP("  qwdfk  yuil;",                \
             "  astrg  hneop",                \
             "  zxcvb  jm,./")

LAYER_MAP(
  LANG_MAP(_Q, _W, _D, _F, _K,   _Y, _U, _I,    _L,   _SCLN,        \
           _A, _S, _T, _R, _G,   _H, _N, _E,    _O,   _P,           \
           _Z, _X, _C, _V, _B,   _J, _M, _COMM, _DOT, _SLSH))


#endif
#+end_src
**** Semimak JQ
#+begin_src C :tangle base_layers/maks.h
#ifdef _SEMIMAK_JQ_LAYER_ENABLE

LAYER_NAME(SEMIMAK_JQ, \
                   "Semimak_JQ",
                   "", \
                   "")

carte_de_MAP( "  flhvz  'wuoy",               \
              "  srntk  cdeai",               \
              "  xjbmq  pg,./")

LAYER_MAP(
  LANG_MAP(_F, _L, _H, _V, _Z,   _QUOT, _W, _U,    _O,   _Y,               \
           _S, _R, _N, _T, _K,   _C,    _D, _E,    _A,   _I,                    \
           _X, _J, _B, _M, _Q,   _P,    _G, _COMM, _DOT, _SLSH))


#endif
#+end_src
**** Semimak
#+begin_src C :tangle base_layers/maks.h
#ifdef SEMIMAK_LAYER_ENABLE

LAYER_NAME(SEMIMAK,  \
                   "Semimak",  \
                   "", \
                   "")

carte_de_MAP( "  flhvz  qwuoy",                \
              "  srntk  cdeai",                \
              "  x'bmj  pg,./")

LAYER_MAP(
  LANG_MAP(_F, _L,    _H, _V, _Z,  _Q, _W, _U,    _O,   _Y,                 \
           _S, _R,    _N, _T, _K,  _C, _D, _E,    _A,   _I,                 \
           _X, _QUOT, _B, _M, _J,  _P, _G, _COMM, _DOT, _SLSH))

#endif
#+end_src
**** Aptmak 30
#+begin_src C :tangle base_layers/maks.h
#ifdef _APTMAK_30_LAYER_ENABLE

LAYER_NAME(APTMAK_30, \
                   "Aptmak 30", \
                   "", \
                   "E on right thumb")

// APTMAP E on thumb.
carte_de_MAP( "  ;wfpb  qluy'",               \
              "  rsthk  jnaio",               \
              "  xcgdv  zm,./  e")

LAYER_MAP(
  LANG_MAP(_SCLN, _W, _F, _P, _B,    _Q, _L, _U,    _Y,   _QUOT,       \
           _R,    _S, _T, _H, _K,    _J, _N, _A,    _I,   _O,            \
           _X,    _C, _D, _M, _V,    _P, _G, _COMM, _DOT, _SLSH))

#endif
#+end_src
**** Aptmak
#+begin_src C :tangle base_layers/maks.h
#ifdef _APTMAK_LAYER_ENABLE

LAYER_NAME(APTMAK, \
                   "Aptmak", \
                   "",
                   "E on right thumb")

carte_de_MAP( "  /wfpb  jluy'",               \
              "  rsthk  vnaio",               \
              "  xcgdq  zm,.;  e")

LAYER_MAP(
  LANG_MAP(_SLSH, _W, _F, _P, _B,      _J, _L, _U,    _Y,   _QUOT,       \
           _R,    _S, _T, _H, _K,      _V, _N, _A,    _I,   _O,            \
           _X,    _C, _G, _D, _Q,      _Z, _M, _COMM, _DOT, _SCLN))


#endif
#+end_src
**** Aptmak Alt
 Aptmak twist from @GNU on HD.
 Needs combos for jqz.
 Repeat ⟳ key goes where SLSH is.

#+begin_src C :tangle base_layers/maks.h
#ifdef _APTMAK_ALT_LAYER_ENABLE


LAYER_NAME(APTMAK_ALT, \
                   "Aptmak alternate", \
                   "", \
                   "E on right thumb, combos for jqz.")

// aptmak twist from @GNU on HD.
// Needs combos for jqz.
// repeat ⟳ key goes where SLSH is.
carte_de_MAP( "  /wfpk  xluy'",               \
              "  crstb  vnaio",               \
              "   cgd    h,.   e")

LAYER_MAP(
  LANG_MAP(_SLSH, _W, _F, _P, _K,      _X,  _L, _U,    _Y,   _QUOT,       \
           _C,    _R, _S, _T, _B,      _V,  _N, _A,    _I,   _O,            \
           _NO,   _C, _G, _D, _NO,     _NO, _H, _COMM, _DOT, _NO))

#endif
#+end_src
*** Dvorak
**** Dvorak
#+begin_src C :tangle base_layers/dvorak.h
#ifdef _DVORAK_LAYER_ENABLE

LAYER_NAME(DVORAK, "Dvorak", \
                   "",
                   "")

carte_de_MAP(" ',.py fgcrl ",                 \
             " aoeui dhtns ",                 \
             " ;qjkx bmwvz ")

LAYER_MAP(
  LANG_MAP(_QUOT,  _COMM, _DOT, _P,  _Y,   _F, _G, _C, _R, _L,    \
           _A,     _O,    _E,   _U,  _I,   _D, _H, _T, _N, _S,    \
           _SCLN,  _Q,    _J,   _K,  _X,   _B, _M, _W, _V, _Z))
#endif
#+end_src
**** RLC IU Swaps.
#+begin_src C :tangle base_layers/dvorak.h
#ifdef _DVORAK_RLC_IU_LAYER_ENABLE

LAYER_NAME(DVORAK_RLC_IU, \
                  "Dvorak RLC IU", \
                   "", \
                   "Swap RLC and UI")

carte_de_MAP(" ',.py frglc ",                 \
             " aoeiu dhtns ",                 \
             " ;qjkx bmwvz ")

LAYER_MAP(
  LANG_MAP(_QUOT,  _COMM, _DOT, _P,  _Y,   _F, _R, _G, _L, _C,    \
           _A,     _O,    _E,   _I,  _U,   _D, _H, _T, _N, _S,    \
           _SCLN,  _Q,    _J,   _K,  _X,   _B, _M, _W, _V, _Z))

#endif
#+end_src
**** Boo
#+begin_src C :tangle base_layers/dvorak.h
#ifdef _BOO_LAYER_ENABLE

LAYER_NAME(BOO, "Boo", \
                "", \
                "")

carte_de_MAP("  ,.ucv  qfdly",                \
             "  aoesg  bntri",                \
             "  ;x'wz  phmkj")

LAYER_MAP(
  LANG_MAP( _COMM, _DOT, _U,    _C, _V,   _Q, _F, _D, _L, _Y,     \
            _A,    _O,   _E,    _S, _G,   _B, _N, _T, _R, _I,     \
            _SCLN, _X,   _QUOT, _W, _Z,   _P, _H, _M, _K, _J))

#endif
#+end_src
**** Capewell Dvorak
#+begin_src C :tangle base_layers/dvorak.h
#ifdef _CAPEWELL_DVORAK_LAYER_ENABLE

LAYER_NAME(CAPEWELL_DVORAK, \
                   "CAPEWELL_Dvorak", \
                   "", \
                   "")

carte_de_MAP( "  ',.py  qfgrk",               \
              "  oaeiu  dhtns",               \
              "  zxcvj  lmwb;")

LAYER_MAP(
  LANG_MAP(_QUOT, _COMM, _DOT, _P, _Y,  _Q, _F, _G, _R, _K,      \
           _O,    _A,    _E,   _I, _U,  _D, _H, _T, _N, _S,      \
           _Z,    _X,    _C,   _V, _J,  _L, _M, _W, _B, _SCLN))


#endif
#+end_src
**** AHEI
#+begin_src C :tangle base_layers/dvorak.h
#ifdef _AHEI_LAYER_ENABLE

//ahei - derived from dvorak.
// x moved to left side. j on pinky.
/*;pouyq gdlm/= */
/* ahei, fstnr- */
/* j'k.x bcwvz */

LAYER_NAME(AHEI, "AHEI", \
                   "", \
                   "")

carte_de_MAP("pouyq  gdlm/",                  \
             "ahei,  fstnr",                  \
             "j'k.x  bcwvz")

LANG_MAP(_P, _O,    _U, _Y,   _Q,     _G, _D, _L, _M, _SLSH, \
         _A, _H,    _E, _I,   _COMM,  _F, _S, _T, _N, _R,      \
         _J, _QUOT, _K, _DOT, _X,     _B, _C, _W, _V, _Z))

#endif
#+end_src
*** hands Down

The hands down family grew out of MTGap long ago and continues to evolve.

//https://sites.google.com/alanreiser.com/handsdown/home

**** Alternate shift keys
#+begin_src C :tangle base_layers/hands_down.h

/* alt shift keys "? '!  dash and elan */
/* (< {[  - elan                       */
/* dash has thumbs of ,; and .:        */
/* dash and the rest get these too.    */
/* alt shifts   ;: .& /\* '? "! ,| -+  */
/* COMBOS - z = jg, z=vg, q=uk, q=mp.  */

#+end_src

**** Neu
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_NEU_LAYER_ENABLE

LAYER_NAME(HD_NEU, "HD Neu",
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "")

// The only 3x12 layout. The rest are 3x10.
carte_de_MAP( "  wfmpv  /.q\"'z",            \
              "  rsntb  ,aeihj",             \
              "  xcldg  -uoykK")

LAYER_MAP(
  LANG_MAP(_SML_NAV,   _W, _F, _M, _P, _V, _SLSH, _DOT, _Q, _DQUO, _HD_QUOT, _Z, \
           _TAB,       _R, _S, _N, _T, _B, _HD_COMM, _A, _E, _I, _H, _J, \
           _OS_ACCENT, _X, _C, _L, _D, _G, _HD_MINS, _U, _O, _Y, _K, _SML_KEYPAD))

#endif
#+end_src

**** Neu Narrow 3x10
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_NEU_LAYER_ENABLE

LAYER_MAP(_HD_NEU_NARROW, "HD Neu N", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "")

// modified to fit 3x10.
// combos for j and z.
carte_de_MAP( "  wfmpv  /.q\"'",             \
              "  rsntb  ,aeih",              \
              "  xcldg  -uoyk")

LAYER_MAP(
LANG_MAP(_W, _F, _M, _P, _V,  _HD_SLSH, _HD_DOT, _Q, _HD_DQUO, _HD_QUOT, \
         _R, _S, _N, _T, _G,  _HD_COMM, _A,      _E, _I,       _H,      \
         _X, _C, _L, _D, _B,  _HD_MINS, _U,      _O, _Y,       _K,      \
         ))

#endif
#+end_src
**** Neu Narrow 3x10 Mirrored
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_NEU_LAYER_ENABLE

LAYER_NAME(HD_NEU_NARROW_M, "HD Neu NM", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "")

// modified to fit 3x10.
// mirrored.
carte_de_MAP("   '\"q./  vpmfw",               \
             "   hiea,  btnsr",               \
             "   kyou-  gdlcx")

LAYER_MAP(
  LANG_MAP(_HD_QUOT, _HD_DQUO, _Q, _HD_DOT, _HD_SLSH,   _V, _P, _M, _F, _W, \
           _H,       _I,       _E, _A,      _HD_COMM,   _B, _T, _N, _S, _R, \
           _K,       _Y,       _O, _U,      _HD_MINS,   _G, _D, _L, _C, _X))

#endif
#+end_src
**** Ref
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_REF_LAYER_ENABLE

LAYER_NAME(HD_REF, "HD Ref", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "")

carte_de_MAP("    qchpv   kyoj/",             \
             "    rsntg   wueia",             \
             "    xmldb   zf',.")

LAYER_MAP(
  LANG_MAP(_Q, _C, _H, _P, _V,   _K, _Y, _O,       _J,        _HD_SLSH,    \
           _R, _S, _N, _T, _G,   _W, _U, _E,       _I,        _A,         \
           _X, _M, _L, _D, _B,   _Z, _F, _HD_QUOT, _HD_COMM,  _HD_DOT ))


#endif
#+end_src
**** Titanium
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_TITANIUM_LAYER_ENABLE

LAYER_NAME(HD_TITANIUM, \
                   "HD Titanium", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "R on left thumb, space on right")

// no z or q, use combos.
carte_de_MAP("  jgmpv  ;./\"' ",              \
             "  csntw  ,aeih ",               \
             "  xfldb  -uoyk  r")

LAYER_MAP(
  LANG_MAP(_J, _G, _M, _P, _V,  _HD_SCLN, _HD_DOT, _HD_SLSH, _HD_DQUO, _HD_QUOT, \
           _C, _S, _N, _T, _W , _HD_COMM, _A,      _E,       _I,       _H, \
           _X, _F, _L, _D, _B , _HD_MINS, _U,      _O,       _Y,       _K))

#endif

#+end_src

**** Mithril

#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_MITHRIL_LAYER_ENABLE

//Combos.
// z, x on combos. r on thumb.
//Symbol pairs: #_ .: =* /? '" ,; -+

LAYER_NAME(HD_MITHRIL, "HD Mithril", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "R on left thumb, space on right, ZX on combos.")

// no z or q, use combos.
carte_de_MAP("  wpgdz  #.=j' ",              \
             "  cnstk  ,iela ",               \
             "  ybfmv  /uoh-  r")

LAYER_MAP(
  LANG_MAP(_W, _P, _G, _D, _Z,  _HDV_SCLN, _HDV_DOT, _HDV_EQL, _J, _HDV_QUOT, \
           _C, _N, _S, _T, _K , _HDV_COMM, _I,       _E,       _L, _A, \
           _Y, _B, _F, _M, _V , _HDV_SLSH, _U,       _O,       _H, _HDV_MINS))

#endif
#+end_src
**** Vibranium

I've named these as they appeared in the discord channel for Vibranium.
*At the moment they use the same top puncuation line as the other HD layouts.  - fix this.*
There needs to be a =TL_HASH=. and a =*, but these are very personal things.


According to Alan's thoughts:
_Also, I think it would be more informative to refer to the Vibranium variations by the letter in the lower left. This would be 'vb'. The original would be 'vp' and the other would be 'vf'.
they're are super close._

#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_VIBRANIUM_LAYER_ENABLE

//Combos.
//WX for Z,
//XG  for Qu, hold to delete the u._
//Symbol pairs: #_ .: =* /? '" ,; -+

LAYER_NAME(HD_VIBRANIUM,  \
                   "HD Vibranium",  \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "R on left thumb, space on right, ZQ on combos")

// no z or q, use combos.
carte_de_MAP("  wxmgj  ;.=/' ",              \
             "  csntk  ,aeih ",               \
             "  pfldv  -uoyb  r")

LAYER_MAP(
  LANG_MAP(_W, _X, _M, _G, _J, _HDV_SCLN, _HDV_DOT, _HDV_EQL, _HDV_SLSH, _HDV_QUOT, \
           _C, _S, _N, _T, _K, _HDV_COMM, _A, _E, _I, _H,                \
           _P, _F, _L, _D, _V, _HDV_MINS, _U, _O, _Y, _B))

#endif
#+end_src


**** Vibranium No alpha on thumb.

Alan created one like this.
I've added the less modified one that keeps punctuation.
One needs z on a combo and loses slash and quote.
The other needs zq and x on combos but keeps slash and quote.

#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_VIBRANIUM_NT_LAYER_ENABLE

// Move R to right corner displace b, Move b to middle, Move k down,
// swap corners for x and put v there.
// x displaces '.
// q displaces /.

//     vwmgj  ;.=qx
//     scntb  ,aeih
//     fpldk  -uoyr
//        z/

// z and / need a combo or something else.

LAYER_NAME(HD_VIBRANIUM_NT, \
                   "HD Vibranium nt", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "No Alpha on thumb, Z on combos.")

carte_de_MAP("  vwmgj  ;.=qx ",              \
             "  scntb  ,aeih ",               \
             "  fpldk  -uoyr ")

LAYER_MAP(
  LANG_MAP(_W, _X, _M, _G, _J,  _HDV_SCLN, _HDV_DOT, _HDV_EQL, _HDV_SLSH, _HDV_QUOT, \
           _S, _C, _N, _T, _K , _HDV_COMM, _A, _E, _I, _H,                \
           _P, _F, _L, _D, _V , _HDV_MINS, _U, _O, _Y, _B))


#endif

#ifdef HD_VIBRANIUM_NTP_LAYER_ENABLE

LAYER_NAME(HD_VIBRANIUM_NTP, \
                   "HD Vibranium ntp", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "No Alpha on thumb, full punctuation. ZQX on combos.")

// put qx and z on combos. keep ' and /.
carte_de_MAP("  vwmgj  ;.=/' ",              \
             "  scntb  ,aeih ",               \
             "  fpldk  -uoyr ")

LAYER_MAP(
  LANG_MAP(_W, _X, _M, _G, _J,  _HDV_SCLN, _HDV_DOT, _HDV_EQL, _HDV_SLSH, _HDV_QUOT, \
           _S, _C, _N, _T, _K , _HDV_COMM, _A, _E, _I, _H,                \
           _P, _F, _L, _D, _V , _HDV_MINS, _U, _O, _Y, _B))


#endif
#+end_src

**** Vibranium Alternate VF and VP

Alan: The W on pinky is a concern...this is a reasonable alternative.
A bit higher center column, of course, and fractionally higher SFBs, but the SC rolls are better, and the pinky is spared both F&W. redirects are still great.
Depends on where you might like your w.

#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_VIBRANIUM_VF_LAYER_ENABLE

LAYER_NAME(HD_VIBRANIUM_VF, \
                   "HD Vibranium VF", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "R on left thumb, space on right")

carte_de_MAP("  xpmgj  ;.=/' ",              \
             "  scntk  ,aeih ",               \
             "  vfldw  -uoyb  r")

LAYER_MAP(
  LANG_MAP(_X, _P, _M, _G, _J, _HDV_SCLN, _HDV_DOT, _HDV_EQL, _HDV_SLSH, _HDV_QUOT, \
           _S, _C, _N, _T, _K, _HDV_COMM, _A, _E, _I, _H,                \
           _V, _F, _L, _D, _W, _HDV_MINS, _U, _O, _Y, _B))


#endif

#ifdef HD_VIBRANIUM_VP_LAYER_ENABLE

LAYER_NAME(HD_VIBRANIUM_VP, \
                   "HD Vibranium VP", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "R on left thumb, space on right, ZQ on combos")

carte_de_MAP("  xwmgj  ;.=/' ",              \
             "  scntb  ,aeih ",               \
             "  vpldk  -uoyf  r")

LAYER_MAP(
  LANG_MAP(_X, _W, _M, _G, _J,  _HDV_SCLN, _HDV_DOT, _HDV_EQL, _HDV_SLSH, _HDV_QUOT, \
           _S, _C, _N, _T, _B , _HDV_COMM, _A, _E, _I, _H,                \
           _V, _P, _L, _D, _W , _HDV_MINS, _U, _O, _Y, _F))

#endif
#+end_src

**** Vibranium Alternate B
Alan: I'm really feeling the love for this though.

#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_VIBRANIUM_B_LAYER_ENABLE

LAYER_NAME(HD_VIBRANIUM_B, \
                   "HD Vibranium B", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "R on left thumb, space on right")

carte_de_MAP("  xwmgj  ;.=/' ",              \
             "  csntk  ,aeih ",               \
             "  bpldv  -uoyf  r")

LAYER_MAP(
  LANG_MAP(_X, _W, _M, _G, _J,  _HDV_SCLN, _HDV_DOT, _HDV_EQL, _HDV_SLSH, _HDV_QUOT, \
           _C, _S, _N, _T, _K , _HDV_COMM, _A, _E, _I, _H,                \
           _B, _P, _L, _D, _V , _HDV_MINS, _U, _O, _Y, _F))


#endif
#+end_src


**** Rhodium
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_RHODIUM_LAYER_ENABLE

LAYER_NAME(HD_RHODIUM, "HD Rhodium", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "R on left thumb, space on right, ZQ on combos.")

carte_de_MAP("  bjhgx  ;./\"' ",              \
             "  csntk  ,aeim ",               \
             "  pfldv  -uoyw  r")

LAYER_MAP(
  LANG_MAP(_W, _V, _M, _G, _EQL,  _HD_SCLN, _HD_DOT, _HD_SLSH, _HD_DQUO, _HD_QUOT, \
           _C, _S, _N, _T, _K ,   _HD_COMM, _A, _E, _I, _M,              \
           _P, _F, _L, _D, _X ,   _HD_MINS, _U, _O, _Y, _W))

#endif
#+end_src
**** Rhodium B variation
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_RHODIUM_B_LAYER_ENABLE

LAYER_NAME(HD_RHODIUM_B, \
                   "HD Rhodium B", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "R on left thumb, space on right, ZQ on combos.")

carte_de_MAP("  wvmg=  ;./j' ",               \
             "  csntk  ,aeih ",               \
             "  pfldx  -uoyb  r")

LAYER_MAP(
  LANG_MAP(_W, _V, _M, _G, _EQL,  _HD_SCLN, _HD_DOT, _HD_SLSH, _J, _HD_QUOT, \
           _C, _S, _N, _T, _K ,   _HD_COMM, _A,      _E,       _I, _H, \
           _P, _F, _L, _D, _X ,   _HD_MINS, _U,      _O,       _Y, _B))

#endif
#+end_src
**** Rhodium C variation
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_RHODIUM_C_LAYER_ENABLE

/* // from @exanimo */
/* // qzx on the edges, combos or elsewhere. */
/* carte_de_MAP("  `',.=  jwhv/\\ ",             \ */
/*              " qmeia-  gtnscx ",              \ */
/*              "  kyou;  bdlfpz  r")

/* \ */

LAYER_NAME(HD_RHODIUM_C, \
                   "HD Rhodium C", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "R on left thumb, space on right, ZQ on combos.")

carte_de_MAP("  `\".'  jwhv/ ",                \
             "  meia,  gtnsc ",                \
             "  kyou-  bdlfp  r")

LAYER_MAP(
  LANG_MAP(_GRV, _HD_SLASH, _HD_DQUO, _HD_DOT, _EQL,      _J, _W, _H, _J, _V,  \
           _M,   _E,       _I,        _A,      _HD_COMM,  _G, _T, _N, _S, _C, \
           _K,   _Y,       _O,        _U,      _HD_MINS,  _B, _D, _L, _F, _P))


#endif
#+end_src
**** Vroomy
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_VROOMY_LAYER_ENABLE

LAYER_NAME(HD_VROOMY, \
                   "HD Vroomy", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "T on left thumb, space on right")

carte_de_MAP("  xflb'  ;.=jv ",               \
             "  csndk  ,aeir ",               \
             "  wghp/  -uoym  t")

LAYER_MAP(
  LANG_MAP(_X, _F, _L, _B, _HD_QUOT,  _HD_SCLN, _HD_DOT, _EQL, _J, _V,     \
           _C, _S, _N, _D, _K,        _HD_COMM, _A,      _E,   _I, _H,           \
           _W, _G, _H, _P, _HD_SLSH,  _HD_MINS, _U,      _O,   _Y, _B)

#endif
#+end_src
**** Gold
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_GOLD_LAYER_ENABLE

LAYER_NAME(HD_GOLD, "HD Gold", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "T on left thumb, space on right, QZ on combos.")

carte_de_MAP("  jgmpv  ;./\"' ",                              \
             "  rsndb  ,aeih ",                               \
             "  xflcw  -uoyk  t")
/* t, ␣ */

LAYER_MAP(
  LANG_MAP(_J, _G, _M, _P, _V,  _HD_SCLN, _HD_DOT, _HD_SLSH, _HD_DQUO, _HD_QUOT, \
           _R, _S, _N, _D, _B , _HD_COMM, _A,      _E,       _I,       _H, \
           _X, _F, _L, _C, _W , _HD_MINS, _U,      _O,       _Y,       _K))

#endif
#+end_src
**** Platinum
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_PLATINUM_LAYER_ENABLE


LAYER_NAME(HD_PLATINUM, "HD Platinum", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "L on left thumb, space on right")

/* jz pq alt shifts   ;: .& /\* '? "! ,| -+ */

carte_de_MAP( "jghpv   ;./'\"",               \
              "rsntb   ,aeic",                \
              "xfmdk   -uowy  l")
/* l   ␣   */

LAYER_MAP(
  LANG_MAP(_J, _G, _H, _P, _V,  _HD_SCLN, _HD_DOT, _HD_SLSH, _HD_QUOT, _HD_DQUO, \
           _R, _S, _N, _T, _B,  _HD_COMM, _A, _E, _I, _C,                \
           _X, _F, _M, _D, _K,  _HD_MINS, _U, _O, _W, _Y))

#endif
#+end_src
**** Silver
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_SILVER_LAYER_ENABLE

LAYER_NAME(HD_SILVER, "HD Silver", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "N on left thumb, space on right")

carte_de_MAP("jgmpv   ;./'\"",                \
             "rshtb   ,aeic",                 \
             "xfldk   -uowy  n")
/* n   ␣   */

LAYER_MAP(
  LANG_MAP(_J, _G, _M, _P, _V,  _HD_SCLN, _HD_DOT, _HD_SLSH, _HD_QUOT, _HD_DQUO, \
           _R, _S, _H, _T, _B,  _HD_COMM, _A,      _E,       _I,       _C, \
           _X, _F, _L, _D, _K,  _HD_MINS, _U,      _O,       _W,       _Y))

#endif
#+end_src
**** Bronze
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_BRONZE_LAYER_ENABLE


LAYER_NAME(HD_BRONZE, "HD Bronze", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "H on left thumb, space on right")

carte_de_MAP("jgmpv   ;./'\"",                \
             "rsntb   ,aeic",                 \
             "xfldk   -uowy  h")
/* h   ␣   */

LAYER_MAP(
  LANG_MAP(_J, _G, _M, _P, _V, _HD_SCLN, _HD_DOT, _HD_SLSH, _HD_QUOT, _HD_DQUO, \
           _R, _S, _N, _T, _B , _HD_COMM, _A,     _E,       _I,       _C, \
           _X, _F, _L, _D, _K , _HD_MINS, _U,     _O,       _W,       _Y))

#endif
#+end_src
**** Elan
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_ELAN_LAYER_ENABLE

/* ,; .:  ␣  ⏎ */
/* vz g  h  p  kq  /\* (< {[ '! "? */

LAYER_NAME(HD_ELAN, "HD Elan", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "")

carte_de_MAP("vghpk   /({'\"",               \
             "rsntf   jaeci",                \
             "xmldb   -uowy")

LAYER_MAP(
  LANG_MAP(_V, _G, _H, _P, _K,   _HD_ELAN_SLSH, _HD_ELAN_LPRN, _HD_ELAN_LCBR, _HD_ELAN_QUOT, _HD_ELAN_DQUO, \
           _R, _S, _N, _T, _F,   _J,            _A, _E, _C, _I, \
           _X, _M, _L, _D, _B,   _HD_ELAN_MINS, _U, _O, _W, _Y))

#endif
#+end_src
**** Dash
#+begin_src C :tangle base_layers/hands_down.h
#ifdef HD_DASH_LAYER_ENABLE


LAYER_NAME(HD_DASH, "HD Dash", \
                   "https://sites.google.com/alanreiser.com/handsdown/home", \
                   "E on left thumb")

  carte_de_MAP("jgmpv   ;.'\"/",             \
               "rsntb   ,haoi",              \
               "xcldw   -fuky  e")
    /*   e   ␣   */

LAYER_MAP(
  LANG_MAP(_J, _G, _M, _P, _V , _HD_DASH_SCLN, _HD_DASH_DOT, _HD_DASH_QUOT, _HD_DASH_DQUO, _HD_DASH_SLSH, \
           _R, _S, _N, _T, _B , _HD_DASH_COMM, _H, _A, _O, _I,                \
           _X, _C, _L, _D, _W , _HD_DASH_MINS, _F, _U, _K, _Y))

#endif
#+end_src
*** MTGap
**** MTGap

An alternate. Z below or on thumb.
 Reference: MTGAP
 =y p o u - | b d l c k j=
 =i n e a , | m h t s r v=
 =( " ' . _ | ) f w g x=
   z

#+begin_src C :tangle base_layers/gap.h
#ifdef MTGAP_ENABLE

LAYER_NAME(MTGAP, "Mtgap", \
                   "",
                   "")

carte_de_MAP("   ypouj  kdlcw",               \
             "   inea,  mhtsr",               \
             "   qz/.;  bfgvx")

LAYER_MAP(
  LANG_MAP(_Y, _P, _O,    _U,   _J,      _K, _D, _L, _C, _W,      \
           _I, _N, _E,    _A,   _COMM,   _M, _H, _T, _S, _R,      \
           _Q, _Z, _SLSH, _DOT, _SCLN,   _B, _F, _G, _V, _X))

#endif
#+end_src
**** Apt
#+begin_src C :tangle base_layers/gap.h
#ifdef APT_ENABLE

LAYER_NAME(APT, "Apt", \
          "https://github.com/Apsu/APT" , \
          "Apt v3")

carte_de_MAP("   wgdfb  qluoy",               \
             "   rsthk  jneai ",             \
             "   xcmpv  z,.'/")

LAYER_MAP(
  LANG_MAP(_W, _G, _D, _F, _B,    _Q, _L,    _U,   _O,    _Y,                   \
           _R, _S, _T, _H, _K,    _J, _N,    _E,   _A,    _I,           \
           _X, _C, _M, _P, _V,    _Z, _COMM, _DOT, _QUOT, _SLSH))


#endif
#+end_src
**** CTGap
#+begin_src C :tangle base_layers/gap.h
#ifdef CTGAP_ENABLE

LAYER_NAME(CTGAP, "Ctgap", \
                   "", \
                   "")

carte_de_MAP("  vplcf  kuoyj",                \
             "  rntsd  'aeih",                \
             "  zbmgw  x,.;q")

LAYER_MAP(
  LANG_MAP(_V, _P, _L, _C, _F,   _K,    _U,    _O,   _Y,    _J, \
           _R, _N, _T, _S, _D,   _QUOT, _A,    _E,   _I,    _H, \
           _Z, _B, _M, _G, _W,   _X,    _COMM, _DOT, _SCLN, _Q))

#endif
#+end_src
**** Canary
#+begin_src C :tangle base_layers/gap.h
#ifdef CANARY_ENABLE

LAYER_NAME(CANARY, "Canary", \
                   "", \
                   "")

carte_de_MAP( "  wlypb   zfou'",                                 \
              "  crstg   mneia",                                 \
              "  qjvdk   xh/,.")

LAYER_MAP(
  LANG_MAP(_W, _L, _Y, _P, _B, _Z, _F, _O,    _U,    _QUOT,       \
           _C, _R, _S, _T, _G, _M, _N, _E,    _I,    _A,            \
           _Q, _J, _V, _D, _K, _X, _H, _SLSH, _COMM, _DOT))

#endif
#+end_src
*** Qwerty
**** Qwerty
#+begin_src C :tangle base_layers/qwerty.h
#ifdef QWERTY_ENABLE

LAYER_NAME(QWERTY, "Qwerty", \
                   "", \
                   "")

carte_de_MAP("   qwert  yuiop",               \
             "   asdfg  hjkl;",               \
             "   zxcvb  nm,./")

// Need TLKC around comm, dot, and quot, and scln
// Qwerty based layers that I don't really use.
LAYER_MAP(
  LANG_MAP(_Q, _W, _E, _R, _T, _Y,  _U,  _I,    _O,   _P,           \
           _A, _S, _D, _F, _G, _H,  _J,  _K,    _L,   _SCLN,      \
           _Z, _X, _C, _V, _B, _N,  _M,  _COMM, _DOT, _SLSH))

#endif
#+end_src
**** Azerty
#+begin_src C :tangle base_layers/qwerty.h
#ifdef AZERTY_ENABLE

LAYER_NAME(AZERTY, "Azerty", \
                   "", \
                   "")

carte_de_MAP("   azert  yuiop",               \
             "   qsdfg  hjkl;",               \
             "   wxcvb  nm,./")

// Need TLKC around comm, dot, and quot, and scln
// Qwerty based layers that I don't really use.
LAYER_MAP(
  LANG_MAP(_A, _Z, _E, _R, _T, _Y,  _U,  _I,    _O,   _P,           \
           _Q, _S, _D, _F, _G, _H,  _J,  _K,    _L,   _SCLN,      \
           _W, _X, _C, _V, _B, _N,  _M,  _COMM, _DOT, _SLSH))

#endif
#+end_src
**** Workman
#+begin_src C :tangle base_layers/qwerty.h
#ifdef WORKMAN_ENABLE

LAYER_NAME(WORKMAN, "Workman", \
                   "", \
                   "")

carte_de_MAP("   qdrwb  jfup;",               \
             "   ashtg  yneio",               \
             "   zxmcv  kl,./")

LAYER_MAP(
  LANG_MAP(_Q, _D, _R, _W, _B,   _J, _F, _U,    _P,   _SCLN,        \
           _A, _S, _H, _T, _G,   _Y, _N, _E,    _O,   _I,           \
           _Z, _X, _M, _C, _V,   _K, _L, _COMM, _DOT, _SLSH))

#endif
#+end_src
**** Norman
#+begin_src C :tangle base_layers/qwerty.h
#ifdef NORMAN_ENABLE

LAYER_NAME(NORMAN, "Norman", \
                   "", \
                   "")

carte_de_MAP("   qwdfk  jurl;",               \
             "   asetg  yniou",               \
             "   zxcvb  pm,./")

LAYER_MAP(
  LANG_MAP(_Q, _W, _D, _F, _K,   _J, _U, _R,    _L,   _SCLN,      \
           _A, _S, _E, _T, _G,   _Y, _N, _I,    _O,   _U,           \
           _Z, _X, _C, _V, _B,   _P, _M, _COMM, _DOT, _SLSH))

#endif
#+end_src
** Random KLA map data
This is just some KLA data I found and used to create some of these layouts.

#+begin_src C :tangle kla-data.txt
/*
This file can be commented by blocks or single lines using //
Blank lines are ignored
*/
/*
Bigram frequencies in stats.csv
*/

[keys]
L21 L22 L23 L24 L25 L26 R26 R25 R24 R23 R22 R21
L31 L32 L33 L34 L35 L36 R36 R35 R34 R33 R32 R31
L41 L42 L43 L44 L45 L46 R46 R45 R44 R43 R42 R41

[weights]
5.0 3.6 2.4 1.8 2.2 3.5 3.5 2.2 1.8 2.4 3.6 5.0
4.0 1.6 1.2 1.0 1.0 3.0 3.0 1.0 1.0 1.2 1.6 4.0
5.0 3.4 2.6 2.2 1.8 4.0 4.0 1.8 2.2 2.6 3.4 5.0

/*
Weights should:
- limit weak fingers
- limit bottom row
- increase home row
- limit finger travel distance

https://colemakmods.github.io/mod-dh/compare.html
*/

[penalties]
  ,same_row,row_jump1,row_jump2
ii,      2.5,     3.5,      4.5  // same finger
im,      0.5,     1.0,      2.0
ir,      0.5,     0.8,      1.5
ip,      0.5,     0.8,      1.1
mi,     -1.5,    -0.5,      1.5  // inward roll
mm,      2.5,     3.5,      4.5  // same finger
mr,      0.5,     1.0,      2.0
mp,      0.5,     0.8,      1.5
ri,     -1.5,    -0.5,      1.5  // inward roll
rm,     -2.0,    -0.5,      1.2  // inward roll
rr,      2.5,     3.5,      4.5  // same finger
rp,      1.0,     1.5,      2.5
pi,     -1.0,     0.0,      1.0  // inward roll
pm,     -1.0,     0.0,      1.5  // inward roll
pr,     -1.0,     0.0,      1.5  // inward roll
pp,      3.0,     4.0,      5.5  // same finger

/*
Only apply if not the same letter, and both letters on the same hand.

i, m, r, and p refer to the fingers (index, middle, ring, pinky)
The columns refer to how many rows separate the two keys

Penalties should:
- limit same finger typing (except same key twice)
- balance hands
- favor inward rolling
(last 2 in opposition with each other)
*/

[layouts]

>>Qwerty
# q w e r t y i o u p #
é a s d f g h j k l ; '
è z x c v b n m , . / -

>>Azerty
è a z e r t y u i o p ^
' q s d f g h j k l m ù
é w x c v b n , . : ! -

>>Qwertz
# q w e r t z u i o p ü
é a s d f g h j k l ö ä
è y x c v b n m , . - '

>>Bépo 40%
# b é p o è ^ v d l j z
- a u i e , c t s r n m
ç à y x . k ' q g h f w

// https://github.com/TeXitoi/keyberon#whats-the-layout
>>Bépo keyberon
# b é p o è ^ v d l j z
w a u i e , c t s r n m
- à y x . k ' q g h f ç

>>Dvorak
- ' , . p y f g c r l #
é a o e u i d h t n s #
è ; q j k x b m w v z #

>>Colemak
# q w f p g j l u y ; #
é a r s t d h n e i o '
è z x c v b k m , . / -

>>Colemak DH
# q w f p b j l u y ; #
é a r s t g m n e i o '
è z x c d v k h , . / -

>>Colemak DH mod
# q w f p b j l u y é è
# a r s t g m n e i o -
# z x c d v k h , . ' /

>>Workman
# q d r w b j f u p ; #
é a s h t g y n e o i '
è z x m c v k l , . / -

>>Norman
# q w d f k j u r l ; #
é a s e t g y n i o h '
è z x c v b p m , . / -

>>Carpalx
# q g m l w b y u v ; é
è d s t n r i a e o h '
# z x c f j k p , . / -

>>Neo
- x v l c w k h g f q ß
é u i a e o s n r t d y
è ü ö ä p z b m , . j '

// http://mkweb.bcgsc.ca/carpalx/?full_optimization
>>qgmlwyfub
# q g m l w y f u b ; é
è d s t n r i a e o h '
# z x c v j k p , . / -

// https://mathematicalmulticore.wordpress.com/the-keyboard-layout-project/
>>MTGAP
# y p o u j k d l c w #
é i n e a , m h t s r '
è q z / . : b f g v x -

// http://mtgap.bilfo.com/official_keyboard.html
// http://mtgap.bilfo.com/completed_keyboard.html
>>MTGAP 2.0
# , f h d k j c u l . #
é o a n t g m s e r i -
è q x b p z y w ' v ; #

>>MTGAP "Easy"
# q w l d b j f u k p #
é a s r t g h n e o i -
è z x c v ; y m , . / '

>>MTGAP "shortcuts"
# k g l d b j h u f . #
é r o t s w m n e a i -
è z x v c q y p , ' ; #

>>MTGAP "standard"
# k l h c b j d u f . #
é o r n s g w t e a i -
è x q v m z y p , ' ; #

>>MTGAP "ergonomic"
# . f u d j q h c w k #
é i a e t p l n s r o -
è ' , y g z - m b v x #

// https://geekhack.org/index.php?topic=67604.0
>>Oneproduct
# p l d w g j x o y q è
- n r s t m u a e i h '
# z c f v b , . ? ; k é

// https://bepo.fr/wiki/Utilisateur:Bibidibop
>>Coeur
# é w o p y b ' d l j z
x a u e i , c t s r n h
# - à è . k g m f q v #

// https://geekhack.org/index.php?topic=98275.0
>>Kaehi
# q w l d g j u o p / é
è n r s t m k a e h i '
# z x c v b y f , . ; -

// https://deskthority.net/wiki/BEAKL
>>BEAKL 15
é q h o u x g c r f z #
- y i e a . d s t n b ;
è j / , k ' w m l p v #

// https://web.archive.org/web/20190906220509/http://shenafu.com/smf/index.php?topic=89.msg2566#msg2566
>>BEAKL 19
é q . o u j w d n m , #
- h a e i k g s r t p ;
è z ' / y x b c l f v #

// https://www.reddit.com/r/ErgoDoxEZ/comments/gsvpug/layout_of_the_month_beakl_15/ftcan68/?context=3
>>BEAKL 19bis
# q y o u z w d n c k #
- h i e a , g t r s p ;
è j ' é . x v m l f b #

// https://www.reddit.com/r/ErgoMechKeyboards/comments/j1eopm/hands_down_layout_is_ready_for_daily_use/g7bjmr7/?context=3
>>BEAKL 19 Opt French
# w m r d v y u o q x #
# g s n t p , i e a h -
# k f l c b j é ' . z è

// http://millikeys.sourceforge.net/asset/
>>ASSET
# q w j f g y p u l ; #
é a s e t d h n i o r '
è z x c v b k m , . / -

// https://sourceforge.net/projects/qwpr/
>>Qwpr
# q w p r f y u k l ; #
é a s d t g h n i o e '
è z x c v b j m , . / -

// http://www.minimak.org/
>>Minimak-8key
# q w d r k y u i l p #
é a s t f g h n e o ; '
è z x c v b j m , . / -

// https://github.com/mw8/white_keyboard_layout
// adapted to ergo keyboard
>>White
# v y d , ' j m l u ( )
é a t h e b c s n o i -
è p k g w q x r f . z #

// https://github.com/jackrosenthal/threelayout
>>Three
# q f u y z x k c w b #
é o h e a i d r t n s -
è , m . j ; g l p v ' #

//https://sites.google.com/alanreiser.com/handsdown
>>Hands down
# q c h g j y f o b ' #
é s n r t p w u e i a #
è x m l d z v k . , ; -

//https://sites.google.com/alanreiser.com/handsdown
>>Notarize
# q w d f p y u k l ' #
é a s t e g h n i o r #
è z x c v b j m . , ; -

// http://kennetchaz.github.io/symmetric-typing/soul.html
>>Soul mod
# q w l d p k m u y ; '
è a s r t g f n e i o é
# j z x c v b h , . / -

// http://kennetchaz.github.io/symmetric-typing/niro.html
>>Niro mod
# q w u d p j f y l ; #
é a s e t g h n i r o '
è b z x c v k m , . / -

// https://docs.google.com/document/d/1yiCnIi1oagV1D8ZouMt-TRFRG8d6AfSBIwQkBvSflvY/edit
>>The-1
# k m l u ? v d r ' q #
é a t h e . c s n o i -
è z p f j , b g w x y /

// https://engram.dev
>>Engram 2.0
# b y o u ' " l d w v z
é c i e a , . h t s n q
è g x j k - ? r m f p #

// https://github.com/MadRabbit/halmak
>>Halmak
# w l r b z ; q u d j #
é s h n t , . a e o i '
è f m v c / g p x k y -

// https://keyboard-design.com/letterlayout.html?layout=optimal-digram.en.ansi
>>Optimal digram
# q y u . , f m l d p z
é s i e a o h n r t c g
è j ) ' ? ( x v w k b -

// https://keyboard-design.com/letterlayout.html?layout=uciea-keyboard.en.ansi
>>Uciea
# p y u o - k d h f x q
é c i e a ' g t n s r v
è z " , . ; w m l b j -

// https://keyboard-design.com/letterlayout.html?layout=x1.en.ergodox
// . and , moved
>>x1
# k y o ' ! f c l p q z
é h i e a u d s t n r v
è j ? . , # w g m b x -
#+end_src
